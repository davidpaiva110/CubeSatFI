#**************************************************************************
#   Copyright (C) 2015 by Microsemi Corporation                           *
#   soc_tech@microsemi.com                                                *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 2 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program; if not, write to the                         *
#   Free Software Foundation, Inc.,                                       *
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.           *
#**************************************************************************

#------------------------------------------------------------------------------
# Microsemi Cortex-M1
# http://www.microsemi.com/products/fpga-soc/soc-processors/arm-cortex-m1
#------------------------------------------------------------------------------

set DEVICE FPGA

#
# RAM base address and size
# Edit these or pass them in to match the target hardware configuration
# and the linker script used - e.g.
# --command "set RAM_BASE 0x00000000; set RAM_SIZE 0x8000" \
# --file board/microsemi-cortex-m1.cfg
#

if { ! [exists RAM_BASE] } {
	set RAM_BASE 0x00000000
}

if { ! [exists RAM_SIZE } {
	set RAM_SIZE 0x00007000
}

#
# Cortex-M1 DAP
#

jtag newtap $DEVICE dap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version

#
# Target CPU
#

set _TARGETNAME $DEVICE.cpu
target create $_TARGETNAME cortex_m -chain-position $DEVICE.dap

#
# ESRAM
#

$_TARGETNAME configure -work-area-phys $RAM_BASE -work-area-size $RAM_SIZE -work-area-backup 0

#
# ENVM/Flash?
#

# flash bank $DEVICE.envm cfi 0x00000000 0x40000 4 4 $_TARGETNAME

#
# Reset configuration
#

# SRSTn not implemented so use SYSRESETREQ to perform a soft reset
cortex_m reset_config sysresetreq

# Only TRSTn supported
reset_config trst_only

#
# Event handlers
#

# reset-init event handler
$_TARGETNAME configure -event reset-init {
	# device reset-init
	# lr/r14 is 0xffffffff on reset
	# This can cause gdb to generate errors of the following form early on:
	# "Error: address + size wrapped(0xffffffff, 0x00000004)"
	# To avoid these we zeroize lr here
	reg lr 0

	# call board level reset-init if defined
	if { [exists -proc do_board_reset_init] } {
		do_board_reset_init
	}
}

# examine-end event handler
$_TARGETNAME configure -event examine-end {
	# Check that we are, in fact, talking to a Cortex-M1
	# http://infocenter.arm.com/help/topic/com.arm.doc.ddi0413d/Cihhbddh.html
	mem2array a 32 0xe000ed00 1
	set cpuid [expr (($a(0) >> 4) & 0x00000fff)]
	if { $cpuid ne 0x00000c21 } {
		error "Failed to detect Cortex-M1"
	}
}

# gdb-detach event handler
$_TARGETNAME configure -event gdb-detach {
	# resume execution on debugger detach
	resume
}
