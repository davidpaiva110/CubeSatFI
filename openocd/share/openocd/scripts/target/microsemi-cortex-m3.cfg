#**************************************************************************
#   Copyright (C) 2015 by Microsemi Corporation                           *
#   soc_tech@microsemi.com                                                *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 2 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program; if not, write to the                         *
#   Free Software Foundation, Inc.,                                       *
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.           *
#**************************************************************************

#------------------------------------------------------------------------------
# Microsemi SmartFusion A2FXXX and SmartFusion2 M2SXXX Cortex-M3 SoC FPGAs
# http://www.microsemi.com/products/fpga-soc/soc-fpga/smartfusion
# http://www.microsemi.com/products/fpga-soc/soc-fpga/smartfusion2 
# 
# A single consolidated script is used for SmartFusion and SmartFusion2 as
# there is much commonality to how OpenOCD interacts with them. 
#
# This script requires that DEVICE is set to the appropriate SmartFusion A2FXXX
# or SmartFusion2 M2SXXX device name. By default it is assumed that JTAG_SEL
# is tied high for debugging via FlashPro and the FPGA TAP. This means that
# the FPGA TAP is visible and occludes the Cortex-M3 DAP TAP until the former 
# is bypassed/switched off using a Microsemi proprietary bypass instruction. If
# JTAG_SEL is actually tied low, thus bypassing the FPGA TAP in hardware and 
# exposing the Cortex-M3 DAP TAP directly, then JTAG_SEL can be set to "L". 
# This is normally the case when debugging via the ARM RVI connector using a 
# third party RVI JTAG probe (e.g. Olimex ARM-USB-TINY-H or similar, Segger 
# J-Link etc.). 
# 
# The DEVICE and, optionally, JTAG_SEL variables are normally set in a board 
# specific script that reuses this script. For example the simple device based
# board scripts define the appropriate DEVICE value and are suitable for 
# debugging when there are no external Cortex-M3 memory mapped resources such
# as external memories or AMBA based FPGA peripherals:
#
# openocd -f board/microsemi-smartfusion2-m2s100.cfg
#
# The DEVICE and/or JTAG_SEL variables can also be set from the command line
# if necessary - e.g.:
# 
# openocd -c "set DEVICE M2S150" -c "set JTAG_SEL L" ...
#
# e.g. debug M2S150 using FlashPro connecting via the FPGA TAP:
#
# openocd -c "adapter_khz 4000" -f interface/microsemi-flashpro.cfg \
#         -c "set DEVICE M2S150" -f target/microsemi-cortex-m3.cfg
#
# e.g. debug A2F200 using Olimex ARM-USB-TINY-H connecting directly to the 
# Cortex-M3 via RVI connector:
#
# openocd -c "adapter_khz 4000" -f interface/ftdi/olimex-arm-usb-tiny-h.cfg \
#         -c "set DEVICE A2F200" -c "set JTAG_SEL L" \
#         -f target/microsemi-cortex-m3.cfg
#------------------------------------------------------------------------------

# Device name to device family name lookup table
array set device_family {
	A2F060	SmartFusion
	A2F200	SmartFusion
	A2F500	SmartFusion
	M2S005	SmartFusion2
	M2S010	SmartFusion2
	M2S025	SmartFusion2
	M2S050	SmartFusion2
	M2S060	SmartFusion2
	M2S090	SmartFusion2
	M2S150	SmartFusion2
	A4P200	SmartFusion2
}

# Device name to device IDCODE(s) lookup table
array set device_idcodes {
	A2F060	0x05a111cf
	A2F200	"0x05a131cf 0x07a131cf"
	A2F500	"0x05b251cf 0x07b251cf"
	M2S005	0x0f8051cf
	M2S010	0x0f8031cf
	M2S025	0x0f8041cf
	M2S050	0x0f8021cf
	M2S060	0x0f8081cf
	M2S090	0x0f8071cf
	M2S150	0x0f8061cf
	A4P200	0x0f8001cf
}

# Device name to device eSRAM size lookup table
array set device_esram_size {
	A2F060	0x4000
	A2F200	0x10000
	A2F500	0x10000
	M2S005	0x10000
	M2S010	0x10000
	M2S025	0x10000
	M2S050	0x10000
	M2S060	0x10000
	M2S090	0x10000
	M2S150	0x10000
	A4P200	0x10000
}

# Device name to device eNVM size lookup table
array set device_envm_size {
	A2F060	0x20000
	A2F200	0x40000
	A2F500	0x80000
	M2S005	0x20000
	M2S010	0x40000
	M2S025	0x40000
	M2S050	0x40000
	M2S060	0x40000
	M2S090	0x80000
	M2S150	0x80000
	A4P200	0x20000
}

# Device family name to device FPGA TAP "bypass" command lookup table
# SmartFusion CTXSELECT = 0x0a
# SmartFusion2 M3DEBUG = 0x94
array set fpga_bypass_command {
	SmartFusion		0x94
	SmartFusion2	0x0a
}

# Device family name to device FPGA TAP ircapture value
array set fpga_ircapture_value {
	SmartFusion		0x1d
	SmartFusion2	0x95
}

# Device family name to device eNVM driver name lookup table
array set envm_driver {
	SmartFusion		microsemi_smartfusion_envm
	SmartFusion2	microsemi_smartfusion2_envm
}

# 
# Validate DEVICE variable
#

if { ! [exists DEVICE] } {
	error "DEVICE not defined - must be set to the appropriate SmartFusion A2FXXX or SmartFusion2 M2SXXX device name"
} else {
	# Normalise - trim to 6 characters and convert to uppercase
	set DEVICE [string range $DEVICE 0 5]
	set DEVICE [string toupper $DEVICE]
}

if { ! [exists device_family($DEVICE)] } {
	error [format "Unknown DEVICE \"%s\" specified", $DEVICE]
}

#
# Assume JTAG_SEL = H for FlashPro debugging via FPGA TAP
#

if { ! [exists JTAG_SEL] } {
	set JTAG_SEL "H"
} else {
	set JTAG_SEL [string toupper $JTAG_SEL]
	if { $JTAG_SEL ne "H" && $JTAG_SEL ne "L" } {
		error [format "Invalid JTAG_SEL value \"%s\" specified - must be \"H\" or \"L\"", $JTAG_SEL]
	}
}

#
# Describe TAP arrangement...
#

if { $JTAG_SEL eq "H" } {

	# FPGA TAP present, occludes Cortex-M3 DAP TAP and must be bypassed first

	#
	# FPGA TAP
	#

	# Some devices may have more than one IDCODE (e.g. different revisions)
	foreach idcode $device_idcodes($DEVICE) {
		append expected_ids "-expected-id " $idcode " "
	}

	eval "jtag newtap $DEVICE tap -irlen 8 -ircapture $fpga_ircapture_value($device_family($DEVICE)) -irmask 0xff $expected_ids -ignore-version"
	jtag configure $DEVICE.tap -event tap-disable "disable_fpga_tap $DEVICE.tap $fpga_bypass_command($device_family($DEVICE))"
	jtag configure $DEVICE.tap -event setup "switch_from_fpga_tap_to_m3_dap $DEVICE.tap $DEVICE.dap"

	#
	# Cortex-M3 DAP - disabled/not visible by default until FPGA TAP bypassed
	#

	jtag newtap $DEVICE dap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version -disable
	jtag configure $DEVICE.dap -event tap-enable "enable_m3_dap"
	
	#
	# TAP management event handlers
	#

	# Switch from FPGA TAP to Cortex-M3 DAP (by disabling/bypassing the former)
	proc switch_from_fpga_tap_to_m3_dap { fpga_tap m3_dap } {
		jtag tapdisable $fpga_tap
		jtag tapenable $m3_dap
	}

	# Disable FPGA TAP
	proc disable_fpga_tap { fpga_tap bypass_cmd } {
		# Send "bypass" command to FPGA TAP to switch it off
		irscan $fpga_tap $bypass_cmd

		# Allow time for bypass operation to complete to avoid subsequent problems e.g.:
		# Warn : Invalid ACK ... in JTAG-DP transaction
		runtest 8
	}

	# Enable Cortex-M3 DAP
	proc enable_m3_dap { } {
		# Nothing to do here - the work is done in disable_fpga_tap
		# but the handler still needs to be defined
	}	
} else {

	# ... FPGA TAP is bypassed in hardware so Cortex-M3 DAP TAP is available directly

	#
	# Cortex-M3 DAP
	#

	jtag newtap $DEVICE dap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version
}

#
# Target CPU
#

set _TARGETNAME $DEVICE.cpu
target create $_TARGETNAME cortex_m -chain-position $DEVICE.dap

#
# ESRAM
#

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $device_esram_size($DEVICE) -work-area-backup 0

#
# ENVM
#

flash bank $DEVICE.envm $envm_driver($device_family($DEVICE)) 0x60000000 $device_envm_size($DEVICE) 0 0 $_TARGETNAME

#
# Reset configuration
#

# SRSTn not implemented so use SYSRESETREQ to perform a soft reset
cortex_m reset_config sysresetreq

# Only TRSTn supported
reset_config trst_only

#
# Reset initialization
#

# SmartFusion2 reset-init
proc do_smartfusion2_reset_init {} {
	# lr/r14 is 0xffffffff on reset (see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/CHDBIBGJ.html)
	# This can cause gdb to generate errors of the following form early on:
	# "Error: address + size wrapped(0xffffffff, 0x00000004)"
	# To avoid these we zeroize lr here
	reg lr 0

	# Disable watchdog - write 0 to WDOG_CR register
	mww 0x4003806C 0x00000000
	
	# Disable cache - write 0 to CC_CR register
	mww 0x40038018 0x00000000
}

# SmartFusion reset-init
proc do_smartfusion_reset_init {} {
	# Disable watchdog - write 0x4c6e55fa to WDOGENABLE register
	mww 0x40006010 0x4c6e55fa

	# SmartFusion system boot code in eNVM must be run to ensure that the 
	# target is properly and fully initialized before doing anything with it
 
	# Minimal program in eSRAM that just executes a BKPT	
	array set a {
		0	0x20004000
		1	0x20000009
		2	0xbe00be00
	}
	array2mem a 32 0x20000000 [array size a]

	# System boot expects VTOR to point to user program's vector table base address
	mww 0xe000ed08 0x20000000

	# Initialize sp/pc from system boot code vector table
	mem2array a 32 0x60080000 2
	reg sp $a(0)
	reg pc $a(1)

	# Resume execution - runs system boot code which then runs BKPT program
	resume

	# Wait (for up to a second) for target to halt due to BKPT
	wait_halt 1000
}

# Perform SmartFusion or SmartFusion2 device family reset-init
proc do_device_reset_init {} {	
	global DEVICE
	global device_family
	
	if { $device_family($DEVICE) eq "SmartFusion" } {
		do_smartfusion_reset_init
	} else {
		do_smartfusion2_reset_init
	}	
}

# reset-init event handler
$_TARGETNAME configure -event reset-init {
	# device reset-init
	do_device_reset_init

	# call board level reset-init if defined
	if { [exists -proc do_board_reset_init] } {
		do_board_reset_init
	}
}

# examine-end event handler
$_TARGETNAME configure -event examine-end {
	# Check that we are, in fact, talking to a Cortex-M3
	# http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100165_0201_00_en/ric1417175933150.html
	mem2array a 32 0xe000ed00 1
	set cpuid [expr (($a(0) >> 4) & 0x00000fff)]
	if { $cpuid ne 0x00000c23 } {
		error "Failed to detect Cortex-M3"
	}
}

# gdb-detach event handler
$_TARGETNAME configure -event gdb-detach {
	# resume execution on debugger detach
	resume
}
